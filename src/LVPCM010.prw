#Include 'Protheus.ch'
#Include 'TbiConn.ch'

/*
?????????????????????????????????????????????????????????????????????????????
?????????????????????????????????????????????????????????????????????????????
????????????????????????????????????????????????????????????????????????????
???Programa  ?LVPCM010  ?Autor  ?Rafael Rosa da Silva? Data ?  14/11/14   ???
????????????????????????????????????????????????????????????????????????????
???Desc.     ?JOB para efetuar a leitura dos arquivos XML e importar em   ???
???          ? Pre-Notam Fiscal no Protheus								 ???
????????????????????????????????????????????????????????????????????????????
???Uso       ? LVP																 ???
????????????????????????????????????????????????????????????????????????????
?????????????????????????????????????????????????????????????????????????????
?????????????????????????????????????????????????????????????????????????????
*/


User Function LVPCM010()

	If LockByName( 'LVPCM010', .T., .T. )

		MsAguarde( { | lEnd | Executa( @lEnd ) }, 'Executando...', 'Iniciando...', .F. )

	Else

		ApMsgStop( 'Rotina já está sendo executada.' )

	End If


Return

Static Function Executa( lEnd )

	Local _cPathIn	:= ""
	Local _aDirTmp	:= {}
	Local _nI			:= 0
	Local _nSleep		:= 0
	Local _cXML		:= ""
	Local _cAviso		:= ""
	Local _cErro		:= ""
	Local _cErrAuto	:= ""
	Local _oXML
	Local nLen

	_cPathIn := Alltrim(SuperGetMV("ES_DIRNEW",.F.,"\XMLNFE\NEW\"))
	_aDirTmp := Directory(_cPathIn + "*.XML")

	nLen := Len(_aDirTmp)

	For _nI := 1 to nLen
		_cXML		:= ""
		_cAviso	:= ""
		_cErro		:= ""
		_cErrAuto	:= ""

		MsProcTxt("LVPCM010 - Processando " + cValtoChar( _nI ) + ' / ' + cValToChar( nLen ) )

		ProcessMessage()

		//Efetua a leitura do arquivo
		If !M010LeArq(_cPathIn,_aDirTmp[_nI][1],@_cXML)
			AutoGrLog("LVPCM010 - Erro na leitura do arquivo")
			M010MovArq(.F.,_cPathIn,_aDirTmp[_nI][1])
		Else

			//Coloca no padrao UTF-8
			_cXML := EncodeUtf8(_cXML)


			// Verifica se o encode ocorreu com sucesso, pois alguns caracteres especiais provocam erro na funcao de encode, neste caso e feito o tratamento pela funcao A140IRemASC
			cXML:= _cXML
			If Empty(cXML)
				cStrXML := _cXML
				cXMLOri := A140IRemASC(cStrXML)
				cXML := EncodeUtf8(cXMLOri)
			EndIf
			If Empty(cXML)
				If !Empty(_cXML)
					cXML := _cXML
				Else
					AutoGrLog("LVPCM010 - Processamento ERRO Encoding XML" )
					M010MovArq(.F.,_cPathIn,_aDirTmp[_nI][1],"ERRO Encoding XML")
					LOOP
				EndIf
			EndIf

			//Faz o parser do XML
			_oXML	:= XmlParser(cXML,"_",@_cAviso,@_cErro)

			//Verifica se possui alguma mensagem de aviso ou erro no parser do XML
			If Empty(_cAviso) .And. Empty(_cErro)
				//Valida o XML montando os processos para criacao do EXECAUTO da Pre-Nota de Entrada
				If M010VldXML(_oXML,@_cErrAuto)
					AutoGrLog("LVPCM010 - Processamento OK " + cValtoChar( nX ) + '/' + cValToChar( nLen ) )
					M010MovArq(.T.,_cPathIn,_aDirTmp[_nI][1],_cErrAuto)
				Else
					AutoGrLog("LVPCM010 - Processamento ERRO " + _cErrAuto)
					M010MovArq(.F.,_cPathIn,_aDirTmp[_nI][1],_cErrAuto)
				EndIf
			Else
				AutoGrLog("LVPCM010 - Processamento ERRO " + _cErro + " Aviso " + _cAviso)
				_cErrAuto := " ERRO " + _cErro + " Aviso " + _cAviso
				M010MovArq(.F.,_cPathIn,_aDirTmp[_nI][1],_cErrAuto)
			EndIf
		EndIf

		AutoGrLog(Replicate( '-', 200 ))

	Next _nI

	MostraErro()

	UnLockByName( 'LVPCM010', .T., .T. )

Return

/*
?????????????????????????????????????????????????????????????????????????????
?????????????????????????????????????????????????????????????????????????????
????????????????????????????????????????????????????????????????????????????
???Programa  ?M010VldXML?Autor  ?Rafael Rosa da Silva? Data ?  14/11/14   ???
????????????????????????????????????????????????????????????????????????????
???Desc.     ?Valida o XML montando os processos para criacao do EXECAUTO ???
???          ?da Pre-Nota de Entrada								           ???
????????????????????????????????????????????????????????????????????????????
???Uso       ? LVP													           ???
????????????????????????????????????????????????????????????????????????????
?????????????????????????????????????????????????????????????????????????????
?????????????????????????????????????????????????????????????????????????????
*/

Static Function M010VldXML(_oXML,_cErrAuto)

	Local _lRet				:= .T.																			//Controle do Retorno
	Local _cArqLog			:= ""																			//Nome do Arquivo do Erro no EXECAUTO
	Local _cCNPJDest		:= Alltrim(_oXML:_NFEProc:_NFE:_INFNFE:_DEST:_CNPJ:Text)				//CNPJ do Receptor (Filial)
	Local _cCNPJEmit		:= Alltrim(_oXML:_NFEProc:_NFE:_INFNFE:_EMIT:_CNPJ:Text)				//CNPJ do Emitente (Fornecedor)
	//Local _cDoc				:= Alltrim(_oXML:_NFEProc:_NFE:_INFNFE:_IDE:_cNF:Text)					//Numero do Documento
	Local _cDoc     		:= StrZero(Val(Alltrim(_oXML:_NFEProc:_NFE:_INFNFE:_IDE:_NNF:Text)),TamSx3("F1_DOC")[1])                          //Numero do Documento
	Local _cSerie			:= Alltrim(_oXML:_NFEProc:_NFE:_INFNFE:_IDE:_SERIE:Text)				//Serie do Documento
	//Local _dEmissao		:= StoD(StrTran(_oXML:_NFEProc:_NFE:_INFNFE:_IDE:_DEMI:Text,"-",""))	//Data de Emissao
	Local _dEmissao			:= CtoD("")	//Data de Emissao
	Local _aCabSF1			:= {}																			//Cabecalho da Pre Nota Fiscal de Entrada
	Local _aItemSD1			:= {}																			//Itens da Pre Nota Fiscal de Entrada
	Local _cItem			:= ""																			//Variavel de controle de sequencia do Item
	Local _aItens			:= aClone(_oXML:_NFEProc:_NFE:_INFNFE:_DET)								//Array contendo os itens da Pre Nota Fiscal de Entrada
	Local _cProd			:= ""																			//Codigo do Produto
	Local _nQtd				:= 0																			//Quantidade da Nota
	Local _nVlrUnit			:= 0																			//Valor Unitario
	Local _nVlrTotal		:= 0																			//Valor Total
	Local _nI				:= 0																			//Contador do laco
	Local _nTamItem			:= TamSX3("D1_ITEM")[1]														//Tamanho do campo D1_ITEM
	Local _cTpOper			:= SuperGetMV("ES_TPOPIMP",,"")												//Tipo de Operacao padrao da PreNota Fiscal de Entrada
	Local _cSeekSD1			:= ""																			//Chave de Pesquisa da tabela SD1
	Local _cTes				:= ""																			//Codigo do TES
	Local _nBaseIpi      := 0
	Local _nIpi          := 0
	Local _nValIpi       := 0
	Local _cChvNfe       := ""
	Local _nPosIni       := 0
	Local _nPosFim       := 0
	Local _nPosIpi       := 0

	Private aHeader		:= {}

	Private lMsErroAuto	:= .F.			//Variavel usada no EXECAUTO para determinar se conseguiu ou nao criar a Pre Nota Fiscal de Entrada

	if Alltrim(_oXML:_NFEProc:_VERSAO:Text) == "3.10"
		_dEmissao := StoD(StrTran(Left(_oXML:_NFEProc:_NFE:_INFNFE:_IDE:_DHEMI:Text,10),"-",""))  //Data de Emissao
	else
		_dEmissao := StoD(StrTran(_oXML:_NFEProc:_NFE:_INFNFE:_IDE:_DEMI:Text,"-",""))  //Data de Emissao
	endif

	_cChvNfe := AllTrim(_oXML:_NFEProc:_PROTNFE:_INFPROT:_CHNFE:Text)

	if Len(_cSerie) = 1
		_cSerie := "00"+_cSerie
	elseif Len(_cSerie) = 2
		_cSerie := "0"+_cSerie
	endif

	dbSelectArea("SA2")
	dbSetOrder(3)	//A2_FILIAL, A2_CGC
	If !SA2->( dbSeek( xFilial("SA2") + _cCNPJEmit ) )
		_cErrAuto	:= "Fornecedor " + _cCNPJEmit + " nao encontrado"
		Return .F.
	EndIf

	dbSelectArea("SB1")
	dbSetOrder(1)	//B1_FILIAL + B1_COD

	dbSelectArea("SF1")
	dbSetOrder(1)		//F1_FILIAL+F1_DOC+F1_SERIE+F1_FORNECE+F1_LOJA+F1_TIPO
	If SF1->( dbSeek( xFilial("SF1") + PadR(_cDoc,TamSX3("F1_DOC")[1]) + PadR(_cSerie,TamSX3("F1_SERIE")[1]) + SA2->A2_COD + SA2->A2_LOJA + "N" ))
		_cErrAuto	:= "Nota Fiscal (" + xFilial("SF1") + PadR(_cDoc,TamSX3("F1_DOC")[1]) + PadR(_cSerie,TamSX3("F1_SERIE")[1]) + SA2->A2_COD + SA2->A2_LOJA + "N" + ") ja existe no sistema"
		Return .F.
	EndIf

	_aCabSF1	:= {{"F1_FILIAL"	,xFilial("SF1")	,Nil},;		//Filial
	{"F1_TIPO"		,"N"				,Nil},;		//Tipo da Nota Fiscal de Entrada
	{"F1_FORMUL" 	,"N"    			,Nil},;		// Formulario
	{"F1_DOC"		,_cDoc				,Nil},;		//Numero da Nota Fiscal de Entrada
	{"F1_SERIE"	,_cSerie			,Nil},;		//Serie da Nota Fiscal de Entrada
	{"F1_FORNECE"	,SA2->A2_COD		,Nil},;		//Codigo do Fornecedor
	{"F1_LOJA"		,SA2->A2_LOJA		,Nil},;		//Loja do Fornecedor
	{"F1_EMISSAO"	,_dEmissao			,Nil},;		//Emissao da Nota Fiscal de Entrada
	{"F1_EST"		,SA2->A2_EST		,Nil},;		//Estado do Fornecedor
	{"F1_DTDIGIT"	,Date()			,Nil},;		//Data de Digitacao da Nota Fiscal de Entrada
	{"F1_ESPECIE"	,"SPED"			,Nil},;		//Especie da Nota Fiscal de Entrada
	{"F1_COND"   	,SA2->A2_COND		,Nil},;		//Condicao do Fornecedor
	{"F1_CHVNFE"	,_cChvNfe			,Nil},;			//Chave da Nota Fiscal de Entrada
	{"F1_RECBMTO"	,Date()			,Nil}}			//Data do Recebimento da Nota Fiscal de Entrada
	if ValType(_aItens) <> "U"
		For _nI := 1 to Len(_aItens)
			_nPosIni   := 0
			_nPosFim   := 0
			_nPosIpi   := 0
			_cProd     := Alltrim(_aItens[_nI]:_PROD:_CPROD:Text)
			_nQtd      := Val(Alltrim(_aItens[_nI]:_PROD:_QCOM:Text))
			_nVlrUnit  := Val(Alltrim(_aItens[_nI]:_PROD:_VUNCOM:Text))
			_nVlrTotal := Val(Alltrim(_aItens[_nI]:_PROD:_VPROD:Text))
			_cItem     := StrZero(_nI,_nTamItem)
			_nPosIni   := At('<det nItem="'+AllTrim(Str(_nI))+'">',cXml)
			if _nI+1 <= Len(_aItens)
				_nPosFim := At('<det nItem="'+AllTrim(Str(_nI+1))+'">',cXml)-_nPosIni
			else
				_nPosFim := Len(cXml)
			endif
			if _nPosIni > 0
				_nPosIpi := At("<IPITrib>",Subs(cXml,_nPosIni,_nPosFim))
			endif
			if _nPosIpi > 0
				_nBaseIpi := Val(Alltrim(_aItens[_nI]:_IMPOSTO:_IPI:_IPITRIB:_VBC:Text))
				_nIpi     := Val(Alltrim(_aItens[_nI]:_IMPOSTO:_IPI:_IPITRIB:_PIPI:Text))
				_nValIpi  := Val(Alltrim(_aItens[_nI]:_IMPOSTO:_IPI:_IPITRIB:_VIPI:Text))
			else
				_nBaseIpi := 0
				_nIpi     := 0
				_nValIpi  := 0
			endif
			If SB1->( dbSeek( xFilial("SB1") + _cProd ) )
				aAdd(_aItemSD1,{	{"D1_FILIAL"	,xFilial("SD1")	,Nil},;
				{"D1_ITEM"		,_cItem			,Nil},;
				{"D1_COD"		,SB1->B1_COD		,Nil},;
				{"D1_QUANT"	,_nQtd				,Nil},;
				{"D1_VUNIT"	,_nVlrUnit			,Nil},;
				{"D1_TOTAL"	,_nVlrTotal		,Nil},;
				{"D1_FORNECE"	,SA2->A2_COD		,Nil},;
				{"D1_LOJA"		,SA2->A2_LOJA		,Nil},;
				{"D1_LOCAL"	,SB1->B1_LOCPAD	,Nil},;
				{"D1_DOC"		,_cDoc				,Nil},;
				{"D1_EMISSAO"	,_dEmissao			,Nil},;
				{"D1_DTDIGIT"	,Date()			,Nil},;
				{"D1_GRUPO"	,SB1->B1_GRUPO	,Nil},;
				{"D1_TIPO"		,"N"				,Nil},;
				{"D1_BASEIPI"	,_nBaseIpi			,Nil},;
				{"D1_IPI"   	,_nIpi		 		,Nil},;
				{"D1_VALIPI" 	,_nValIpi			,Nil},;
				{"D1_SERIE"	,_cSerie			,Nil}})
			Else
				_lRet := .F.
			EndIf
		Next _nI
	else
		_nPosIni   := 0
		_nPosFim   := 0
		_nPosIpi   := 0
		_cProd     := AllTrim(_oXML:_NFEProc:_NFE:_INFNFE:_DET:_PROD:_CPROD:Text)
		_nQtd      := Val(AllTrim(_oXML:_NFEProc:_NFE:_INFNFE:_DET:_PROD:_QCOM:Text))
		_nVlrUnit  := Val(Alltrim(_oXML:_NFEProc:_NFE:_INFNFE:_DET:_PROD:_VUNCOM:Text))
		_nVlrTotal := Val(Alltrim(_oXML:_NFEProc:_NFE:_INFNFE:_DET:_PROD:_VPROD:Text))
		_cItem     := StrZero(1,_nTamItem)
		_nPosIni   := At('<det nItem="1">',cXml)
		_nPosFim   := Len(cXml)
		if _nPosIni > 0
			_nPosIpi := At("<IPITrib>",Subs(cXml,_nPosIni,_nPosFim))
		endif
		if _nPosIpi > 0
			_nBaseIpi := Val(Alltrim(_oXML:_NFEProc:_NFE:_INFNFE:_DET:_IMPOSTO:_IPI:_IPITRIB:_VBC:Text))
			_nIpi     := Val(Alltrim(_oXML:_NFEProc:_NFE:_INFNFE:_DET:_IMPOSTO:_IPI:_IPITRIB:_PIPI:Text))
			_nValIpi  := Val(Alltrim(_oXML:_NFEProc:_NFE:_INFNFE:_DET:_IMPOSTO:_IPI:_IPITRIB:_VIPI:Text))
		else
			_nBaseIpi := 0
			_nIpi     := 0
			_nValIpi  := 0
		endif
		If SB1->( dbSeek( xFilial("SB1") + _cProd ) )
			aAdd(_aItemSD1,{	{"D1_FILIAL"	,xFilial("SD1")	,Nil},;
			{"D1_ITEM"		,_cItem			,Nil},;
			{"D1_COD"		,SB1->B1_COD		,Nil},;
			{"D1_QUANT"	,_nQtd				,Nil},;
			{"D1_VUNIT"	,_nVlrUnit			,Nil},;
			{"D1_TOTAL"	,_nVlrTotal		,Nil},;
			{"D1_FORNECE"	,SA2->A2_COD		,Nil},;
			{"D1_LOJA"		,SA2->A2_LOJA		,Nil},;
			{"D1_LOCAL"	,SB1->B1_LOCPAD	,Nil},;
			{"D1_DOC"		,_cDoc				,Nil},;
			{"D1_EMISSAO"	,_dEmissao			,Nil},;
			{"D1_DTDIGIT"	,Date()			,Nil},;
			{"D1_GRUPO"	,SB1->B1_GRUPO	,Nil},;
			{"D1_TIPO"		,"N"				,Nil},;
			{"D1_BASEIPI"	,_nBaseIpi			,Nil},;
			{"D1_IPI"   	,_nIpi		 		,Nil},;
			{"D1_VALIPI" 	,_nValIpi			,Nil},;
			{"D1_SERIE"	,_cSerie			,Nil}})
		Else
			_lRet := .F.
		EndIf
	endif

	If _lRet
		//executa o EXECAUTO da Pre-Nota de Entrada
		MSExecAuto({|x,y,z| MATA140(x,y,z) },_aCabSF1,_aItemSD1,3)

		//Verifica se deu erro na execucao
		If lMsErroAuto
			_cArqLog	:= NomeAutoLog()
			_cErrAuto	:= MemoRead(_cArqLog)
			_lRet 		:= .F.
		Else
			AutoGrLog("LVPCM010 - 1 - Gerou a Pre-Nota Fiscal de Entrada - _cDoc/_cSerie " + _cDoc + " " +_cSerie)
			//Ajusta os campos de Documento e Serie conforme o tamanho real do campo
			_cDoc	:= PadR(_cDoc,TamSX3("F1_DOC")[1])
			_cSerie:= PadR(_cSerie,TamSX3("F1_SERIE")[1])

			//Caso o campo que grava se eh uma Pre-Nota Fiscal esteja criado, atualiza
			If SF1->( FieldPos("F1_XIMPNFE") ) <> 0
				AutoGrLog("LVPCM010 - 2 - Tem o campo F1_XIMPNFE")
				dbSelectArea("SF1")
				dbSetOrder(1)	//F1_FILIAL, F1_DOC, F1_SERIE, F1_FORNECE, F1_LOJA, F1_TIPO
				AutoGrLog("LVPCM010 - 3 - Chave SF1 " + xFilial("SF1") + _cDoc + _cSerie + SA2->A2_COD + SA2->A2_LOJA)
				If SF1->( dbSeek( xFilial("SF1") + _cDoc + _cSerie + SA2->A2_COD + SA2->A2_LOJA ) )
					AutoGrLog("LVPCM010 - 4 - Achou SF1")
					RecLock("SF1",.F.)
					SF1->F1_XIMPNFE := "1"
					SF1->( MsUnLock() )
					AutoGrLog("LVPCM010 - 5 - SF1->F1_XIMPNFE " + SF1->F1_XIMPNFE)
				EndIf
			EndIf
			AutoGrLog("LVPCM010 - 6 - Tipo de Operacao " + _cTpOper)
			//Caso o parametro do tipo de Operacao padrao esteja preenchido, busca o TES Inteligente
			If !Empty(_cTpOper)
				dbSelectArea("SD1")
				dbSetOrder(1)	//D1_FILIAL, D1_DOC, D1_SERIE, D1_FORNECE, D1_LOJA, D1_ITEM

				//Monta a chave de pesquisa na tabela SD1
				_cSeekSD1 := xFilial("SD1") + _cDoc + _cSerie + SA2->A2_COD + SA2->A2_LOJA
				AutoGrLog("LVPCM010 - 7 - Chave SD1 " + _cSeekSD1 )
				If SD1->( dbSeek( _cSeekSD1 ) )
					AutoGrLog("LVPCM010 - 8 - Achou o SD1")

					//Crio a variavel para tratar no MaTesInt
					aHeader		:= {}

					While !SD1->( Eof() ) .And. SD1->(D1_FILIAL + D1_DOC + D1_SERIE + D1_FORNECE + D1_LOJA) == _cSeekSD1
						AutoGrLog("LVPCM010 - 9 - Dentro do While do SD1")
						//Busca o TES inteligente coforme parametro
						//nEntSai	 	 	Num?rico	 	 	Documento de 1-Entrada / 2-Sa?da
						//cTpOper	 	 	Car?cter	 	 	Tipo de Opera??o FM_TIPO
						//cClieFor	 	 	Car?cter	 	 	C?digo do Cliente ou Fornecedor
						//cLoja	 	 	Car?cter	 	 	Loja do Cliente ou Fornecedor
						//cTipoCF	 	 	Car?cter	 	 	Tipo C-Cliente / F-Fornecedor
						//cProduto	 	 	Car?cter	 	 	C?digo do Produto
						//cCampo	 	 	Car?cter	 	 	Alias utilizado na fun??o
						_cTes := MaTesInt(1			,_cTpOper	,SA2->A2_COD	,SA2->A2_LOJA	,"F"		,SD1->D1_COD	,"")
						//       MaTesInt(nEntSai	,cTpOper	,cClieFor		,cLoja			,cTipoCF	,cProduto		,cCampo)
						AutoGrLog("LVPCM010 - 10- TES " + _cTes)
						//Caso tenha retornado algum TES valido, grava.
						If !Empty(_cTes)
							RecLock("SD1",.F.)
							SD1->D1_TESACLA	:= _cTes
							SD1->( MsUnLock() )

							AutoGrLog("LVPCM010 - 11- SD1->D1_TESACLA " + SD1->D1_TESACLA)
						EndIf

						SD1->( dbSkip() )
					End
				EndIf
			EndIf
		EndIf
	EndIf

Return _lRet

/*
?????????????????????????????????????????????????????????????????????????????
?????????????????????????????????????????????????????????????????????????????
????????????????????????????????????????????????????????????????????????????
???Programa  ?M010LeArq ?Autor  ?Rafael Rosa da Silva? Data ?  14/11/14   ???
????????????????????????????????????????????????????????????????????????????
???Desc.     ?Efetua a leitura do arquivo XML								    ???
???          ?																    ???
????????????????????????????????????????????????????????????????????????????
???Uso       ? LVP													           ???
????????????????????????????????????????????????????????????????????????????
?????????????????????????????????????????????????????????????????????????????
?????????????????????????????????????????????????????????????????????????????
*/

Static Function M010LeArq(_cPathIn,_cArquivo,_cXML)

	Local _lRet		:= .T.
	Local nHdl := 0

	If nHdl == -1
		If !Empty(_cPathIn + _cArquivo)
			AutoGrLog("LVPCM010 - 101 - Arquivo XML nao encontrado [ "+ cArqXML +"] !!! Favor Verificar")
		Endif
		Return .F.
	Endif

	If File(_cPathIn + _cArquivo)

		nHdl     := fOpen(_cPathIn + _cArquivo,0)

		If nHdl == -1
			If !Empty(_cPathIn + _cArquivo)
				AutoGrLog("LVPCM010 - 101 - Arquivo XML nao encontrado [ "+ cArqXML +"] !!! Favor Verificar")
			Endif
			Return .F.
		Endif

		nTamFile := fSeek(nHdl,0,2)
		fSeek(nHdl,0,0)
		cBuffer  := Space(nTamFile)                // Variavel para criacao da linha do registro para leitura
		nBtLidos := fRead(nHdl,@cBuffer,nTamFile)  // Leitura  do arquivo XML
		fClose(nHdl)

		_cXML 	:= cBuffer

		If Empty(_cXML)
			_lRet := .F.
		EndIf

		If SubStr(_cXML,1,1) != "<"
			nPosPesq := At("<",_cXML)
			_cXML  := SubStr(cXML,nPosPesq,Len(_cXML))		// Remove caracteres estranhos antes da abertura da tag inicial do arquivo
		EndIf

	Else
		_lRet := .F.
	EndIf



Return _lRet

/*
?????????????????????????????????????????????????????????????????????????????
?????????????????????????????????????????????????????????????????????????????
????????????????????????????????????????????????????????????????????????????
???Programa  ?M010MovArq?Autor  ?Rafael Rosa da Silva? Data ?  14/11/14   ???
????????????????????????????????????????????????????????????????????????????
???Desc.     ?Rotina que movimenta o arquivo conforme o status de OK ou   ???
???          ? Erro no processamento                                      ???
????????????????????????????????????????????????????????????????????????????
???Uso       ? LVP													           ???
????????????????????????????????????????????????????????????????????????????
?????????????????????????????????????????????????????????????????????????????
?????????????????????????????????????????????????????????????????????????????
*/

Static Function M010MovArq(_lOk,_cPathIn,_cArquivo,_cErrAuto)

	Local _cPathOk	:= Alltrim(SuperGetMV("ES_DIROLD",.F.,"\XMLNFE\OLD\"))
	Local _cPathEr	:= Alltrim(SuperGetMV("ES_DIRERR",.F.,"\XMLNFE\ERR\"))
	Local _cPathAux	:= IIF(_lOk,_cPathOk,_cPathEr)
	Local _cArqLog	:= _cPathIn + _cArquivo + ".LOG"

	AutoGrLog("M010MovArq - Caminho do Arquivo " + _cPathIn + _cArquivo)
	If File(_cPathIn + _cArquivo)
		AutoGrLog("M010MovArq - Arquivo existe")
		_CopyFile(_cPathIn + _cArquivo,_cPathAux + _cArquivo)
		AutoGrLog("M010MovArq - Copia do caminho " + _cPathIn + _cArquivo + " para o caminho " + _cPathAux + _cArquivo)
		If File(_cPathAux + _cArquivo)
			AutoGrLog("M010MovArq - Encontrou o arquivo no destino")
			Ferase(_cPathIn + _cArquivo)
		Else
			AutoGrLog("M010MovArq - NAO Encontrou o arquivo no destino")
		EndIf
	EndIf

	//Grava o LOG com o erro encontrado, caso possua
	AutoGrLog("M010MovArq - 1 - Erro   : " + _cErrAuto)
	AutoGrLog("M010MovArq - 1 - Arquivo: " + _cArqLog)
	If !Empty(_cErrAuto)
		AutoGrLog("M010MovArq - 2 - Erro   : " + _cErrAuto)
		AutoGrLog("M010MovArq - 2 - Arquivo: " + _cArqLog)
		MemoWrite (_cArqLog,_cErrAuto)
	EndIf

Return